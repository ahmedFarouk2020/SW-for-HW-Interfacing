
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000794  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000928  08000930  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000928  08000928  00010930  2**0
                  CONTENTS
  4 .ARM          00000000  08000928  08000928  00010930  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000928  08000930  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000928  08000928  00010928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000930  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000930  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cc1  00000000  00000000  00010960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e9  00000000  00000000  00011621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00011ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df8f  00000000  00000000  00011b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014fb  00000000  00000000  0001fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fca3  00000000  00000000  00020fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00070c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  00070cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000910 	.word	0x08000910

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000910 	.word	0x08000910

080001d4 <main>:
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

#include "SEVEN_SEGMENT.h"

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

	SEVEN_SEGMENT_Init();
 80001da:	f000 f9bb 	bl	8000554 <SEVEN_SEGMENT_Init>
  while (1) {

	  static unsigned char digit = 0;

	  SEVEN_SEGMENT_Write_Digit(digit);
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <main+0x54>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f9e4 	bl	80005b0 <SEVEN_SEGMENT_Write_Digit>

	  //delay
	  for (int i = 0; i < 1000000; i++){}
 80001e8:	2300      	movs	r3, #0
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	e002      	b.n	80001f4 <main+0x20>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <main+0x58>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	ddf8      	ble.n	80001ee <main+0x1a>

	  digit++;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <main+0x54>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <main+0x54>)
 8000206:	701a      	strb	r2, [r3, #0]
	  // keep it inside the boundary (0 to 9)
	  digit = digit % 10;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <main+0x54>)
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <main+0x5c>)
 800020e:	fba3 1302 	umull	r1, r3, r3, r2
 8000212:	08d9      	lsrs	r1, r3, #3
 8000214:	460b      	mov	r3, r1
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	440b      	add	r3, r1
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	1ad3      	subs	r3, r2, r3
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b01      	ldr	r3, [pc, #4]	; (8000228 <main+0x54>)
 8000222:	701a      	strb	r2, [r3, #0]
  while (1) {
 8000224:	e7db      	b.n	80001de <main+0xa>
 8000226:	bf00      	nop
 8000228:	2000001c 	.word	0x2000001c
 800022c:	000f423f 	.word	0x000f423f
 8000230:	cccccccd 	.word	0xcccccccd

08000234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <SystemInit+0x20>)
 800023a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023e:	4a05      	ldr	r2, [pc, #20]	; (8000254 <SystemInit+0x20>)
 8000240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800025e:	490e      	ldr	r1, [pc, #56]	; (8000298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000274:	4c0b      	ldr	r4, [pc, #44]	; (80002a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000282:	f7ff ffd7 	bl	8000234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000286:	f000 fb1f 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800028a:	f7ff ffa3 	bl	80001d4 <main>
  bx  lr    
 800028e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000290:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000930 	.word	0x08000930
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	20000020 	.word	0x20000020

080002a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC_IRQHandler>
	...

080002ac <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	4603      	mov	r3, r0
 80002ba:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b41      	cmp	r3, #65	; 0x41
 80002c0:	d002      	beq.n	80002c8 <GPIO_Init+0x1c>
 80002c2:	2b42      	cmp	r3, #66	; 0x42
 80002c4:	d064      	beq.n	8000390 <GPIO_Init+0xe4>
					break;
				}//end switch
		break;
	}

}
 80002c6:	e0c7      	b.n	8000458 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<0);
 80002c8:	4b66      	ldr	r3, [pc, #408]	; (8000464 <GPIO_Init+0x1b8>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a65      	ldr	r2, [pc, #404]	; (8000464 <GPIO_Init+0x1b8>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d83b      	bhi.n	8000352 <GPIO_Init+0xa6>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <GPIO_Init+0x34>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	0800030b 	.word	0x0800030b
 80002e8:	08000323 	.word	0x08000323
 80002ec:	0800033b 	.word	0x0800033b
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 80002f0:	4b5d      	ldr	r3, [pc, #372]	; (8000468 <GPIO_Init+0x1bc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	0052      	lsls	r2, r2, #1
 80002f8:	2103      	movs	r1, #3
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	43d2      	mvns	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a59      	ldr	r2, [pc, #356]	; (8000468 <GPIO_Init+0x1bc>)
 8000304:	400b      	ands	r3, r1
 8000306:	6013      	str	r3, [r2, #0]
					break;
 8000308:	e023      	b.n	8000352 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 800030a:	4b57      	ldr	r3, [pc, #348]	; (8000468 <GPIO_Init+0x1bc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	2101      	movs	r1, #1
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a53      	ldr	r2, [pc, #332]	; (8000468 <GPIO_Init+0x1bc>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
					break;
 8000320:	e017      	b.n	8000352 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 8000322:	4b51      	ldr	r3, [pc, #324]	; (8000468 <GPIO_Init+0x1bc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	2102      	movs	r1, #2
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a4d      	ldr	r2, [pc, #308]	; (8000468 <GPIO_Init+0x1bc>)
 8000334:	430b      	orrs	r3, r1
 8000336:	6013      	str	r3, [r2, #0]
					break;
 8000338:	e00b      	b.n	8000352 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 800033a:	4b4b      	ldr	r3, [pc, #300]	; (8000468 <GPIO_Init+0x1bc>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	2103      	movs	r1, #3
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a47      	ldr	r2, [pc, #284]	; (8000468 <GPIO_Init+0x1bc>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
					break;
 8000350:	bf00      	nop
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d003      	beq.n	8000360 <GPIO_Init+0xb4>
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d00c      	beq.n	8000378 <GPIO_Init+0xcc>
		break;
 800035e:	e07b      	b.n	8000458 <GPIO_Init+0x1ac>
							GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000360:	4b41      	ldr	r3, [pc, #260]	; (8000468 <GPIO_Init+0x1bc>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2101      	movs	r1, #1
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	43d2      	mvns	r2, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a3d      	ldr	r2, [pc, #244]	; (8000468 <GPIO_Init+0x1bc>)
 8000372:	400b      	ands	r3, r1
 8000374:	6053      	str	r3, [r2, #4]
					break;
 8000376:	e00a      	b.n	800038e <GPIO_Init+0xe2>
							GPIOA_OTYPER |= (0x01<<PIN_NO);
 8000378:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <GPIO_Init+0x1bc>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	2101      	movs	r1, #1
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a38      	ldr	r2, [pc, #224]	; (8000468 <GPIO_Init+0x1bc>)
 8000388:	430b      	orrs	r3, r1
 800038a:	6053      	str	r3, [r2, #4]
					break;
 800038c:	bf00      	nop
		break;
 800038e:	e063      	b.n	8000458 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<1);
 8000390:	4b34      	ldr	r3, [pc, #208]	; (8000464 <GPIO_Init+0x1b8>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a33      	ldr	r2, [pc, #204]	; (8000464 <GPIO_Init+0x1b8>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	d83b      	bhi.n	800041a <GPIO_Init+0x16e>
 80003a2:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <GPIO_Init+0xfc>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	080003b9 	.word	0x080003b9
 80003ac:	080003d3 	.word	0x080003d3
 80003b0:	080003eb 	.word	0x080003eb
 80003b4:	08000403 	.word	0x08000403
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 80003b8:	4b2c      	ldr	r3, [pc, #176]	; (800046c <GPIO_Init+0x1c0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68ba      	ldr	r2, [r7, #8]
 80003be:	0052      	lsls	r2, r2, #1
 80003c0:	2103      	movs	r1, #3
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	43d2      	mvns	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <GPIO_Init+0x1c0>)
 80003cc:	400b      	ands	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
					break;
 80003d0:	e023      	b.n	800041a <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <GPIO_Init+0x1c0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	0052      	lsls	r2, r2, #1
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_Init+0x1c0>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6013      	str	r3, [r2, #0]
					break;
 80003e8:	e017      	b.n	800041a <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 80003ea:	4b20      	ldr	r3, [pc, #128]	; (800046c <GPIO_Init+0x1c0>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	2102      	movs	r1, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <GPIO_Init+0x1c0>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
					break;
 8000400:	e00b      	b.n	800041a <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <GPIO_Init+0x1c0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	0052      	lsls	r2, r2, #1
 800040a:	2103      	movs	r1, #3
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a16      	ldr	r2, [pc, #88]	; (800046c <GPIO_Init+0x1c0>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6013      	str	r3, [r2, #0]
					break;
 8000418:	bf00      	nop
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d003      	beq.n	8000428 <GPIO_Init+0x17c>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d00c      	beq.n	8000440 <GPIO_Init+0x194>
		break;
 8000426:	e016      	b.n	8000456 <GPIO_Init+0x1aa>
							GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <GPIO_Init+0x1c0>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2101      	movs	r1, #1
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a0c      	ldr	r2, [pc, #48]	; (800046c <GPIO_Init+0x1c0>)
 800043a:	400b      	ands	r3, r1
 800043c:	6053      	str	r3, [r2, #4]
					break;
 800043e:	e00a      	b.n	8000456 <GPIO_Init+0x1aa>
							GPIOB_OTYPER |= (0x01<<PIN_NO);
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <GPIO_Init+0x1c0>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	2101      	movs	r1, #1
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a07      	ldr	r2, [pc, #28]	; (800046c <GPIO_Init+0x1c0>)
 8000450:	430b      	orrs	r3, r1
 8000452:	6053      	str	r3, [r2, #4]
					break;
 8000454:	bf00      	nop
		break;
 8000456:	bf00      	nop
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800
 8000468:	40020000 	.word	0x40020000
 800046c:	40020400 	.word	0x40020400

08000470 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 8000470:	b480      	push	{r7}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	2b41      	cmp	r3, #65	; 0x41
 8000482:	d002      	beq.n	800048a <GPIO_WritePin+0x1a>
 8000484:	2b42      	cmp	r3, #66	; 0x42
 8000486:	d02d      	beq.n	80004e4 <GPIO_WritePin+0x74>
 8000488:	e059      	b.n	800053e <GPIO_WritePin+0xce>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 800048a:	4b30      	ldr	r3, [pc, #192]	; (800054c <GPIO_WritePin+0xdc>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	2103      	movs	r1, #3
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	401a      	ands	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa22 f303 	lsr.w	r3, r2, r3
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d11b      	bne.n	80004de <GPIO_WritePin+0x6e>
			{
			     if(Data)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d00a      	beq.n	80004c2 <GPIO_WritePin+0x52>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <GPIO_WritePin+0xdc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	2101      	movs	r1, #1
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a24      	ldr	r2, [pc, #144]	; (800054c <GPIO_WritePin+0xdc>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	e00a      	b.n	80004d8 <GPIO_WritePin+0x68>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <GPIO_WritePin+0xdc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	2101      	movs	r1, #1
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a1e      	ldr	r2, [pc, #120]	; (800054c <GPIO_WritePin+0xdc>)
 80004d4:	400b      	ands	r3, r1
 80004d6:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 80004dc:	e02f      	b.n	800053e <GPIO_WritePin+0xce>
				result = NOK;
 80004de:	2301      	movs	r3, #1
 80004e0:	75fb      	strb	r3, [r7, #23]
		break;
 80004e2:	e02c      	b.n	800053e <GPIO_WritePin+0xce>
		case('B'):
				if((GPIOB_MODER & (0x01 << 2*PIN_NO))>> (2*PIN_NO))
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <GPIO_WritePin+0xe0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	401a      	ands	r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	fa22 f303 	lsr.w	r3, r2, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d01b      	beq.n	8000538 <GPIO_WritePin+0xc8>
				{
					 if(Data)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d00a      	beq.n	800051c <GPIO_WritePin+0xac>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <GPIO_WritePin+0xe0>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	2101      	movs	r1, #1
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <GPIO_WritePin+0xe0>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	e00a      	b.n	8000532 <GPIO_WritePin+0xc2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <GPIO_WritePin+0xe0>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	2101      	movs	r1, #1
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	43d2      	mvns	r2, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <GPIO_WritePin+0xe0>)
 800052e:	400b      	ands	r3, r1
 8000530:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 8000532:	2300      	movs	r3, #0
 8000534:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 8000536:	e001      	b.n	800053c <GPIO_WritePin+0xcc>
					result = NOK;
 8000538:	2301      	movs	r3, #1
 800053a:	75fb      	strb	r3, [r7, #23]
		break;
 800053c:	bf00      	nop

	}// end switch

	return result;
 800053e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000540:	4618      	mov	r0, r3
 8000542:	371c      	adds	r7, #28
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40020000 	.word	0x40020000
 8000550:	40020400 	.word	0x40020400

08000554 <SEVEN_SEGMENT_Init>:
 *
 * Args: None
 * Return: None
 */
void SEVEN_SEGMENT_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	GPIO_Init('A', 0 , OUTPUT, PUSH_PULL);// a
 8000558:	2300      	movs	r3, #0
 800055a:	2201      	movs	r2, #1
 800055c:	2100      	movs	r1, #0
 800055e:	2041      	movs	r0, #65	; 0x41
 8000560:	f7ff fea4 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 1 , OUTPUT, PUSH_PULL);// b
 8000564:	2300      	movs	r3, #0
 8000566:	2201      	movs	r2, #1
 8000568:	2101      	movs	r1, #1
 800056a:	2041      	movs	r0, #65	; 0x41
 800056c:	f7ff fe9e 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 2 , OUTPUT, PUSH_PULL);// c
 8000570:	2300      	movs	r3, #0
 8000572:	2201      	movs	r2, #1
 8000574:	2102      	movs	r1, #2
 8000576:	2041      	movs	r0, #65	; 0x41
 8000578:	f7ff fe98 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 3 , OUTPUT, PUSH_PULL);// d
 800057c:	2300      	movs	r3, #0
 800057e:	2201      	movs	r2, #1
 8000580:	2103      	movs	r1, #3
 8000582:	2041      	movs	r0, #65	; 0x41
 8000584:	f7ff fe92 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 4 , OUTPUT, PUSH_PULL);// e
 8000588:	2300      	movs	r3, #0
 800058a:	2201      	movs	r2, #1
 800058c:	2104      	movs	r1, #4
 800058e:	2041      	movs	r0, #65	; 0x41
 8000590:	f7ff fe8c 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 5 , OUTPUT, PUSH_PULL);// f
 8000594:	2300      	movs	r3, #0
 8000596:	2201      	movs	r2, #1
 8000598:	2105      	movs	r1, #5
 800059a:	2041      	movs	r0, #65	; 0x41
 800059c:	f7ff fe86 	bl	80002ac <GPIO_Init>
	GPIO_Init('A', 6 , OUTPUT, PUSH_PULL);// g
 80005a0:	2300      	movs	r3, #0
 80005a2:	2201      	movs	r2, #1
 80005a4:	2106      	movs	r1, #6
 80005a6:	2041      	movs	r0, #65	; 0x41
 80005a8:	f7ff fe80 	bl	80002ac <GPIO_Init>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <SEVEN_SEGMENT_Write_Digit>:
 * Args:
 * 		digit -> unsigned char
 * Return: None
 */
void SEVEN_SEGMENT_Write_Digit(unsigned char digit)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	switch(digit)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b09      	cmp	r3, #9
 80005be:	f200 817f 	bhi.w	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <SEVEN_SEGMENT_Write_Digit+0x18>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005f1 	.word	0x080005f1
 80005cc:	08000639 	.word	0x08000639
 80005d0:	08000681 	.word	0x08000681
 80005d4:	080006c9 	.word	0x080006c9
 80005d8:	08000711 	.word	0x08000711
 80005dc:	08000759 	.word	0x08000759
 80005e0:	080007a1 	.word	0x080007a1
 80005e4:	080007e9 	.word	0x080007e9
 80005e8:	08000831 	.word	0x08000831
 80005ec:	08000879 	.word	0x08000879
	{
		case 0:
		{
			GPIO_WritePin('A', 0, 1);// a
 80005f0:	2201      	movs	r2, #1
 80005f2:	2100      	movs	r1, #0
 80005f4:	2041      	movs	r0, #65	; 0x41
 80005f6:	f7ff ff3b 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 80005fa:	2201      	movs	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	2041      	movs	r0, #65	; 0x41
 8000600:	f7ff ff36 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	2041      	movs	r0, #65	; 0x41
 800060a:	f7ff ff31 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 800060e:	2201      	movs	r2, #1
 8000610:	2103      	movs	r1, #3
 8000612:	2041      	movs	r0, #65	; 0x41
 8000614:	f7ff ff2c 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 1);// e
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	2041      	movs	r0, #65	; 0x41
 800061e:	f7ff ff27 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 8000622:	2201      	movs	r2, #1
 8000624:	2105      	movs	r1, #5
 8000626:	2041      	movs	r0, #65	; 0x41
 8000628:	f7ff ff22 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 0);// g
 800062c:	2200      	movs	r2, #0
 800062e:	2106      	movs	r1, #6
 8000630:	2041      	movs	r0, #65	; 0x41
 8000632:	f7ff ff1d 	bl	8000470 <GPIO_WritePin>
			break;
 8000636:	e143      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 1:
		{
			GPIO_WritePin('A', 0, 0);// a
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2041      	movs	r0, #65	; 0x41
 800063e:	f7ff ff17 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	2041      	movs	r0, #65	; 0x41
 8000648:	f7ff ff12 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 800064c:	2201      	movs	r2, #1
 800064e:	2102      	movs	r1, #2
 8000650:	2041      	movs	r0, #65	; 0x41
 8000652:	f7ff ff0d 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 0);// d
 8000656:	2200      	movs	r2, #0
 8000658:	2103      	movs	r1, #3
 800065a:	2041      	movs	r0, #65	; 0x41
 800065c:	f7ff ff08 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 8000660:	2200      	movs	r2, #0
 8000662:	2104      	movs	r1, #4
 8000664:	2041      	movs	r0, #65	; 0x41
 8000666:	f7ff ff03 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 0);// f
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2041      	movs	r0, #65	; 0x41
 8000670:	f7ff fefe 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 0);// g
 8000674:	2200      	movs	r2, #0
 8000676:	2106      	movs	r1, #6
 8000678:	2041      	movs	r0, #65	; 0x41
 800067a:	f7ff fef9 	bl	8000470 <GPIO_WritePin>
			break;
 800067e:	e11f      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 2:
		{
			GPIO_WritePin('A', 0, 1);// a
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	2041      	movs	r0, #65	; 0x41
 8000686:	f7ff fef3 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 800068a:	2201      	movs	r2, #1
 800068c:	2101      	movs	r1, #1
 800068e:	2041      	movs	r0, #65	; 0x41
 8000690:	f7ff feee 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 0);// c
 8000694:	2200      	movs	r2, #0
 8000696:	2102      	movs	r1, #2
 8000698:	2041      	movs	r0, #65	; 0x41
 800069a:	f7ff fee9 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 800069e:	2201      	movs	r2, #1
 80006a0:	2103      	movs	r1, #3
 80006a2:	2041      	movs	r0, #65	; 0x41
 80006a4:	f7ff fee4 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 1);// e
 80006a8:	2201      	movs	r2, #1
 80006aa:	2104      	movs	r1, #4
 80006ac:	2041      	movs	r0, #65	; 0x41
 80006ae:	f7ff fedf 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 0);// f
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	2041      	movs	r0, #65	; 0x41
 80006b8:	f7ff feda 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 80006bc:	2201      	movs	r2, #1
 80006be:	2106      	movs	r1, #6
 80006c0:	2041      	movs	r0, #65	; 0x41
 80006c2:	f7ff fed5 	bl	8000470 <GPIO_WritePin>
			break;
 80006c6:	e0fb      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 3:
		{
			GPIO_WritePin('A', 0, 1);// a
 80006c8:	2201      	movs	r2, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	2041      	movs	r0, #65	; 0x41
 80006ce:	f7ff fecf 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	2041      	movs	r0, #65	; 0x41
 80006d8:	f7ff feca 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 80006dc:	2201      	movs	r2, #1
 80006de:	2102      	movs	r1, #2
 80006e0:	2041      	movs	r0, #65	; 0x41
 80006e2:	f7ff fec5 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 80006e6:	2201      	movs	r2, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	2041      	movs	r0, #65	; 0x41
 80006ec:	f7ff fec0 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	2041      	movs	r0, #65	; 0x41
 80006f6:	f7ff febb 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 0);// f
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	2041      	movs	r0, #65	; 0x41
 8000700:	f7ff feb6 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 8000704:	2201      	movs	r2, #1
 8000706:	2106      	movs	r1, #6
 8000708:	2041      	movs	r0, #65	; 0x41
 800070a:	f7ff feb1 	bl	8000470 <GPIO_WritePin>
			break;
 800070e:	e0d7      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}

		case 4:
		{
			GPIO_WritePin('A', 0, 0);// a
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2041      	movs	r0, #65	; 0x41
 8000716:	f7ff feab 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 800071a:	2201      	movs	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	2041      	movs	r0, #65	; 0x41
 8000720:	f7ff fea6 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	2041      	movs	r0, #65	; 0x41
 800072a:	f7ff fea1 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 0);// d
 800072e:	2200      	movs	r2, #0
 8000730:	2103      	movs	r1, #3
 8000732:	2041      	movs	r0, #65	; 0x41
 8000734:	f7ff fe9c 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	2041      	movs	r0, #65	; 0x41
 800073e:	f7ff fe97 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 8000742:	2201      	movs	r2, #1
 8000744:	2105      	movs	r1, #5
 8000746:	2041      	movs	r0, #65	; 0x41
 8000748:	f7ff fe92 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 800074c:	2201      	movs	r2, #1
 800074e:	2106      	movs	r1, #6
 8000750:	2041      	movs	r0, #65	; 0x41
 8000752:	f7ff fe8d 	bl	8000470 <GPIO_WritePin>
			break;
 8000756:	e0b3      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 5:
		{
			GPIO_WritePin('A', 0, 1);// a
 8000758:	2201      	movs	r2, #1
 800075a:	2100      	movs	r1, #0
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f7ff fe87 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 0);// b
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	2041      	movs	r0, #65	; 0x41
 8000768:	f7ff fe82 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 800076c:	2201      	movs	r2, #1
 800076e:	2102      	movs	r1, #2
 8000770:	2041      	movs	r0, #65	; 0x41
 8000772:	f7ff fe7d 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 8000776:	2201      	movs	r2, #1
 8000778:	2103      	movs	r1, #3
 800077a:	2041      	movs	r0, #65	; 0x41
 800077c:	f7ff fe78 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	2041      	movs	r0, #65	; 0x41
 8000786:	f7ff fe73 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 800078a:	2201      	movs	r2, #1
 800078c:	2105      	movs	r1, #5
 800078e:	2041      	movs	r0, #65	; 0x41
 8000790:	f7ff fe6e 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 8000794:	2201      	movs	r2, #1
 8000796:	2106      	movs	r1, #6
 8000798:	2041      	movs	r0, #65	; 0x41
 800079a:	f7ff fe69 	bl	8000470 <GPIO_WritePin>
			break;
 800079e:	e08f      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 6:
		{
			GPIO_WritePin('A', 0, 1);// a
 80007a0:	2201      	movs	r2, #1
 80007a2:	2100      	movs	r1, #0
 80007a4:	2041      	movs	r0, #65	; 0x41
 80007a6:	f7ff fe63 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 0);// b
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	2041      	movs	r0, #65	; 0x41
 80007b0:	f7ff fe5e 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 80007b4:	2201      	movs	r2, #1
 80007b6:	2102      	movs	r1, #2
 80007b8:	2041      	movs	r0, #65	; 0x41
 80007ba:	f7ff fe59 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 80007be:	2201      	movs	r2, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	2041      	movs	r0, #65	; 0x41
 80007c4:	f7ff fe54 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 1);// e
 80007c8:	2201      	movs	r2, #1
 80007ca:	2104      	movs	r1, #4
 80007cc:	2041      	movs	r0, #65	; 0x41
 80007ce:	f7ff fe4f 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 80007d2:	2201      	movs	r2, #1
 80007d4:	2105      	movs	r1, #5
 80007d6:	2041      	movs	r0, #65	; 0x41
 80007d8:	f7ff fe4a 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 80007dc:	2201      	movs	r2, #1
 80007de:	2106      	movs	r1, #6
 80007e0:	2041      	movs	r0, #65	; 0x41
 80007e2:	f7ff fe45 	bl	8000470 <GPIO_WritePin>
			break;
 80007e6:	e06b      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 7:
		{
			GPIO_WritePin('A', 0, 1);// a
 80007e8:	2201      	movs	r2, #1
 80007ea:	2100      	movs	r1, #0
 80007ec:	2041      	movs	r0, #65	; 0x41
 80007ee:	f7ff fe3f 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 80007f2:	2201      	movs	r2, #1
 80007f4:	2101      	movs	r1, #1
 80007f6:	2041      	movs	r0, #65	; 0x41
 80007f8:	f7ff fe3a 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 80007fc:	2201      	movs	r2, #1
 80007fe:	2102      	movs	r1, #2
 8000800:	2041      	movs	r0, #65	; 0x41
 8000802:	f7ff fe35 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 0);// d
 8000806:	2200      	movs	r2, #0
 8000808:	2103      	movs	r1, #3
 800080a:	2041      	movs	r0, #65	; 0x41
 800080c:	f7ff fe30 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	2041      	movs	r0, #65	; 0x41
 8000816:	f7ff fe2b 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 0);// f
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	2041      	movs	r0, #65	; 0x41
 8000820:	f7ff fe26 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 0);// g
 8000824:	2200      	movs	r2, #0
 8000826:	2106      	movs	r1, #6
 8000828:	2041      	movs	r0, #65	; 0x41
 800082a:	f7ff fe21 	bl	8000470 <GPIO_WritePin>
			break;
 800082e:	e047      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 8:
		{
			GPIO_WritePin('A', 0, 1);// a
 8000830:	2201      	movs	r2, #1
 8000832:	2100      	movs	r1, #0
 8000834:	2041      	movs	r0, #65	; 0x41
 8000836:	f7ff fe1b 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	2041      	movs	r0, #65	; 0x41
 8000840:	f7ff fe16 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 8000844:	2201      	movs	r2, #1
 8000846:	2102      	movs	r1, #2
 8000848:	2041      	movs	r0, #65	; 0x41
 800084a:	f7ff fe11 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 800084e:	2201      	movs	r2, #1
 8000850:	2103      	movs	r1, #3
 8000852:	2041      	movs	r0, #65	; 0x41
 8000854:	f7ff fe0c 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 1);// e
 8000858:	2201      	movs	r2, #1
 800085a:	2104      	movs	r1, #4
 800085c:	2041      	movs	r0, #65	; 0x41
 800085e:	f7ff fe07 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 8000862:	2201      	movs	r2, #1
 8000864:	2105      	movs	r1, #5
 8000866:	2041      	movs	r0, #65	; 0x41
 8000868:	f7ff fe02 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 800086c:	2201      	movs	r2, #1
 800086e:	2106      	movs	r1, #6
 8000870:	2041      	movs	r0, #65	; 0x41
 8000872:	f7ff fdfd 	bl	8000470 <GPIO_WritePin>
			break;
 8000876:	e023      	b.n	80008c0 <SEVEN_SEGMENT_Write_Digit+0x310>
		}
		case 9:
		{
			GPIO_WritePin('A', 0, 1);// a
 8000878:	2201      	movs	r2, #1
 800087a:	2100      	movs	r1, #0
 800087c:	2041      	movs	r0, #65	; 0x41
 800087e:	f7ff fdf7 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 1, 1);// b
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	2041      	movs	r0, #65	; 0x41
 8000888:	f7ff fdf2 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 2, 1);// c
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	2041      	movs	r0, #65	; 0x41
 8000892:	f7ff fded 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 3, 1);// d
 8000896:	2201      	movs	r2, #1
 8000898:	2103      	movs	r1, #3
 800089a:	2041      	movs	r0, #65	; 0x41
 800089c:	f7ff fde8 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 4, 0);// e
 80008a0:	2200      	movs	r2, #0
 80008a2:	2104      	movs	r1, #4
 80008a4:	2041      	movs	r0, #65	; 0x41
 80008a6:	f7ff fde3 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 5, 1);// f
 80008aa:	2201      	movs	r2, #1
 80008ac:	2105      	movs	r1, #5
 80008ae:	2041      	movs	r0, #65	; 0x41
 80008b0:	f7ff fdde 	bl	8000470 <GPIO_WritePin>
			GPIO_WritePin('A', 6, 1);// g
 80008b4:	2201      	movs	r2, #1
 80008b6:	2106      	movs	r1, #6
 80008b8:	2041      	movs	r0, #65	; 0x41
 80008ba:	f7ff fdd9 	bl	8000470 <GPIO_WritePin>
			break;
 80008be:	bf00      	nop
		}
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4d0d      	ldr	r5, [pc, #52]	; (8000900 <__libc_init_array+0x38>)
 80008cc:	4c0d      	ldr	r4, [pc, #52]	; (8000904 <__libc_init_array+0x3c>)
 80008ce:	1b64      	subs	r4, r4, r5
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	2600      	movs	r6, #0
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4d0b      	ldr	r5, [pc, #44]	; (8000908 <__libc_init_array+0x40>)
 80008da:	4c0c      	ldr	r4, [pc, #48]	; (800090c <__libc_init_array+0x44>)
 80008dc:	f000 f818 	bl	8000910 <_init>
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	10a4      	asrs	r4, r4, #2
 80008e4:	2600      	movs	r6, #0
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	4798      	blx	r3
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	4798      	blx	r3
 80008fc:	3601      	adds	r6, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	08000928 	.word	0x08000928
 8000904:	08000928 	.word	0x08000928
 8000908:	08000928 	.word	0x08000928
 800090c:	0800092c 	.word	0x0800092c

08000910 <_init>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr

0800091c <_fini>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr
